{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_driver_p.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//----------------------------------------------------------------------
//     
// DESCRIPTION: This class passes transactions between the sequencer
//        and the BFM driver interface.  It accesses the driver BFM 
//        through the bfm handle. This driver
//        passes transactions to the driver BFM through the access
//        task.  
//
//----------------------------------------------------------------------
{% endblock %}

{% block contents %}
class {{name}}_driver_p  {{macro.paramDeclare(paramDefs)|indent(6)}} extends {{name}}_driver;

{{macro.compUtils([ name,'_driver_p']|join(""),paramDefs)}}

typedef virtual {{name}}_driver_bfm {{macro.paramUse(paramDefs)}} vif_t;
vif_t bfm;

{% if veloceReady %}
//*******************************************************************
// Macros that define structs located in {{name}}_macros.svh
//*******************************************************************
// Initiator macro used by {{name}}_driver and {{name}}_driver_bfm
// to communicate initiator driven data to {{name}}_driver_bfm.           
`{{name}}_INITIATOR_STRUCT
  {{name}}_initiator_s {{name}}_initiator_struct;

//*******************************************************************
// FUNCTION: to_initiator_struct()
// This function packs transaction variables into a {{name}}_initiator_s
// structure.  The function returns the handle to the {{name}}_initiator_struct.
// This function is defined in {{name}}_macros.svh
`{{name}}_TO_INITIATOR_STRUCT_FUNCTION  
`{{name}}_FROM_INITIATOR_STRUCT_FUNCTION

//*******************************************************************
// Responder macro used by {{name}}_driver and {{name}}_driver_bfm
// to communicate Responder driven data to {{name}}_driver_bfm.
`{{name}}_RESPONDER_STRUCT
  {{name}}_responder_s {{name}}_responder_struct;
{% endif %}

//*******************************************************************
// FUNCTION: from_responder_struct()
// This function unpacks the struct provided as an argument into transaction 
// variables of this class.
// This function is defined in {{name}}_macros.svh
`{{name}}_FROM_RESPONDER_STRUCT_FUNCTION 
`{{name}}_TO_RESPONDER_STRUCT_FUNCTION

// pragma uvmf custom class_item_additional begin
// pragma uvmf custom class_item_additional end

// ****************************************************************************
// This function is the standard SystemVerilog constructor.
//
  function new( string name = "", uvm_component parent=null );
    super.new( name, parent );
  endfunction

// ****************************************************************************
// This function sends configuration object variables to the driver BFM 
// using the configuration struct.
//
  virtual function void configure(input CONFIG_T cfg);
{% if veloceReady %}
      bfm.configure( cfg.to_struct() );
{% else %}
      bfm.configure( cfg );
{% endif %}
  endfunction

// ****************************************************************************
// This function places a handle to this class in the proxy variable in the
// driver BFM.  This allows the driver BFM to call tasks and function within this class.
//
  virtual function void set_bfm_proxy_handle();
    {%if not useDpiLink %}bfm.proxy = this;{% endif %}
  endfunction

  virtual function void set_config(input {{name}}_configuration configuration);
    typedef {{name}}_param_bridge_p {{macro.paramUse(paramDefs)}} param_bridge_t;
    param_bridge_t param_bridge_p;
    super.set_config(configuration);
    $cast(param_bridge_p, configuration.parameter_bridge); 
    // Obtain the virtual interface
    bfm = param_bridge_p.driver_vif;
    bfm.proxy = this;
  endfunction

// **************************************************************************** 
// This task is called by the run_phase in uvmf_driver_base.              
  virtual task access( inout REQ txn );
// pragma uvmf custom access begin
    if (configuration.initiator_responder==RESPONDER) begin
      // Complete current transfer and wait for next transfer
{% if veloceReady %}
      bfm.respond_and_wait_for_next_transfer( 
          {{name}}_initiator_struct, 
          to_responder_struct(txn) 
          );
      // Unpack information about initiated transfer received by this responder
      from_initiator_struct(txn, {{name}}_initiator_struct);
{% else %}
      bfm.respond_and_wait_for_next_transfer( txn );
{% endif %}
    end else begin    
      // Initiate a transfer and get response
{% if veloceReady %}
      bfm.initiate_and_get_response( 
          to_initiator_struct(txn), 
          {{name}}_responder_struct 
          );
      // Unpack transfer response information received by this initiator
      from_responder_struct(txn, {{name}}_responder_struct);
{% else %}
      bfm.initiate_and_get_response( txn );
{% endif %}
    end
// pragma uvmf custom access end
  endtask

endclass

// pragma uvmf custom external begin
// pragma uvmf custom external end

{% endblock %}
