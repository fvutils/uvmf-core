{% set fname = "{{vip_location}}/{{interface_location}}/{{name}}_pkg/{{src_dir}}{{name}}_param_bridge.svh" %}
{% extends "base_template.TMPL" %}

{% block description %}
//----------------------------------------------------------------------
//     
// DESCRIPTION: 
//
//----------------------------------------------------------------------
{% endblock %}

{% block contents %}
typedef class {{name}}_driver;
typedef class {{name}}_monitor;

class {{name}}_param_bridge extends uvm_object;
    `uvm_object_utils({{name}}_param_bridge)

    function new(string name="{{name}}_param_bridge");
        super.new(name);
    endfunction

{% if paramDefs|length > 0 %}
    // Parameter values struct, which is initialized by 
    // the parameterized class
    {{name}}_params_t param_vals;
{% endif %}

    // Active/passive indicator, initialized by the paramterized class
    uvmf_active_passive_t active_passive;

    virtual function {{name}}_driver create_driver(string name, uvm_component parent);
      // Implementation provided by the parameterized class
    endfunction

    virtual function {{name}}_monitor create_monitor(string name, uvm_component parent);
      // Implementation provided by the parameterized class
    endfunction

  // ****************************************************************************
  // TASK: wait_for_reset
  // *[Required]*  Blocks until reset is released.  The wait_for_reset operation is performed
  // by a task in the monitor bfm.
  virtual task wait_for_reset();
    // Implementation provided by the parameterized class
  endtask

  // ****************************************************************************
  // TASK: wait_for_num_clocks
  // *[Required]* Blocks until specified number of clocks have elapsed. The wait_for_num_clocks
  // operation is performed by a task in the monitor bfm.
  virtual task wait_for_num_clocks(int clocks);
    // Implementation provided by the parameterized class
  endtask

endclass
{% endblock %}